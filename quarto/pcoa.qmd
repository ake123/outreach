---
title: "Principal Coordinate Analysis"
format: revealjs
editor: visual
smaller: true
bibliography: references.bib
---

```{r}
#| label: setup
#| include: false
knitr::opts_chunk$set(message = FALSE, warning = FALSE, echo = TRUE)
```

## Example 1.1

To get started, we import Tengeler2020 from mia and store it into a variable.

```{r}
#| label: import-tengeler
# Load libraries and import dataset
library(mia)
library(scater)

data("Tengeler2020", package = "mia")
tse <- Tengeler2020
```

After that, we transform the counts assay to relative abundances and store the new assay back into the TreeSE.

```{r}
#| label: transform-relabundance
# Transform counts to relative abundance
tse <- transformAssay(tse, method = "relabundance")
```

## Example 1.2: Ordination

Here, we run PCoA on the relative abundance assay to reduce the dimensionality of the data. We set `method` to Bray-Curtis dissimilarity.

```{r}
#| label: run-bray
# Run PCoA with Bray-Curtis dissimilarity
tse <- runMDS(tse,
              assay.type = "relabundance",
              FUN = vegan::vegdist,
              method = "bray",
              name = "Bray")
```

The reduced dimensions can be retrieved with `reducedDim`.

```{r}
head(reducedDim(tse, "Bray"))
```

## Example 1.2: Visualisation

Then, we visualise the first two dimensions.

```{r}
# Visualise Bray-Curtis dissimilarity between samples
plotReducedDim(tse, "Bray", colour_by = "patient_status", shape_by = "cohort")
```

## Exercise 1

-   retrieval of reduced dimensions: [exercise 7.1](https://microbiome.github.io/OMA/docs/devel/pages/98_exercises.html#reduced-dimensions-retrieval){target="_blank"}
-   PCoA: [exercise 7.3](https://microbiome.github.io/OMA/docs/devel/pages/98_exercises.html#principal-coordinate-analysis-pcoa){target="_blank"}

## Example 2.1: PCA

When Euclidean distance is used, PCoA reduces to PCA.

```{r}
tse <- runPCA(tse,
              assay.type = "relabundance",
              ncomp = 5,
              name = "Euclidean")
```

We can retrieve a list of all reduced dimensions with `reducedDimNames`.

```{r}
reducedDimNames(tse)
```

If you need only their names, these can be accessed with `reducedDims`.

```{r}
reducedDims(tse)
```

## Example 2.2: PCA Contributors

Some taxa contribute more than others to the generation of reduced dimensions.
They can be determined from the PCA loadings.

```{r}
#| label: load-fun
#| code-fold: true
#| code-summary: "Show code"
# Define function to visualise top contributors
plot_loads <- function(loads, comp, n = 6) {

  loads <- sort(loads[ , comp], decreasing = TRUE)
  loads <- c(head(loads, round(n / 2)), tail(loads, round(n / 2)))
  
  barplot(loads, horiz = TRUE, las = 1,
          cex.names = 0.5, main = comp, xlab = "Loadings")
}
```

The top PCA loadings for the first and fourth dimension are visualised below.

```{r}
#| label: pca-load
#| code-fold: true
#| code-summary: "Show code"
# Fetch feature loadings
taxa_loads <- attr(reducedDim(tse, "Euclidean"), "rotation")

# Plot loadings for PCA 1 and 4
par(mfrow = c(1, 2))
plot_loads(taxa_loads, "PC1")
plot_loads(taxa_loads, "PC4")
```

## Example 2.3: PCoA Contributors

PCoA does not return feature loadings, but they can be estimated as the
correlation between taxa and reduced dimensions.

```{r}
#| label: pcoa-load1
#| code-fold: true
#| code-summary: "Show code"
# Compute correlation between features and reduced dimensions
comp_loads <- apply(
    assay(tse, "relabundance"),
    MARGIN = 1, simplify = FALSE,
    function(x) cor(x, reducedDim(tse, "Bray"), method = "kendall")
)

# Prepare matrix of feature loadings
taxa_loads <- do.call(rbind, comp_loads)
colnames(taxa_loads) <- paste0("Bray", seq(ncol(taxa_loads)))
rownames(taxa_loads) <- rownames(tse)
```

The top PCoA loadings for the first two dimensions are visualised below.

```{r}
#| label: pcoa-load2
#| code-fold: true
#| code-summary: "Show code"
# Visualise loadings for PCoA 1 and 2
par(mfrow = c(1, 2))
plot_loads(taxa_loads, "Bray1")
plot_loads(taxa_loads, "Bray2")
```

## Exercise 2

-   PCA: [exercise 7.2](https://microbiome.github.io/OMA/docs/devel/pages/98_exercises.html#visualization-basics-with-pca){target="_blank"}

an exercise where you have to find important taxa based on loadings we could also use toptaxa coloured ordination plot

## Example 3.1: Other Distances

A different distance function can be specified with `FUN`, such as phylogenetic
distance.

```{r}
#| label: run-unifrac
# Run PCoA with Unifrac distance
tse <- runMDS(tse, assay.type = "counts", name = "Unifrac", ncomp = 3,
              FUN = mia::calculateUnifrac, tree = rowTree(tse))
```

The number of dimensions to visualise can also be adjusted with `ncomp`.

```{r}
# Visualise Unifrac distance between samples
plotReducedDim(tse, "Unifrac", ncomp = 3, colour_by = "patient_status")
```

## Example 3.2: Comparison

Different ordination methods return considerably different results, which can be compared to achieve a better understanding of the data.

```{r}
#| label: compare
#| code-fold: true
#| code-summary: "Show code"
library(patchwork)

# Generate plots for 
plots <- lapply(reducedDimNames(tse),
                plotReducedDim,
                object = tse,
                colour_by = "patient_status")

# Generate multi-panel plot
wrap_plots(plots) +
  plot_layout(guides = "collect") +
  plot_annotation(tag_levels = "A")
```

## Exercise 3

-   an exercise with unifrac or custom distance
-   an exercise with comparing methods

## Resources

-   [OMA Chapter - Community Similarity](https://microbiome.github.io/OMA/docs/devel/pages/20_beta_diversity.html){target="_blank"}
-   [vegan::vegdist vignettes](https://www.rdocumentation.org/packages/vegan/versions/2.6-6.1/topics/vegdist){target="_blank"}
