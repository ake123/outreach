---
title: "Principal Coordinate Analysis"
format: revealjs
editor: visual
smaller: true
bibliography: references.bib
---

## Concepts

Principal Coordinate Analysis (**PCoA**) is a method to find the dimensions of the data that explain most of its variance. The **diversity between samples** can be expressed in terms of several ecological indices, such as Bray-Curtis and Aitchison dissimilarities. If Euclidean distance is used, PCoA becomes Principal Component Analysis (**PCA**). You can learn more about PCoA in OMA [chapter 7](https://microbiome.github.io/OMA/docs/devel/pages/20_beta_diversity.html).

The following packages are necessary to execute the code in this presentation:

-   [*mia*](https://microbiome.github.io/mia/articles/mia.html): methods to analyse microbiome data
-   [*scater*](https://master.bioconductor.org/packages/release/bioc/html/scater.html): utils to visualise data stored in TreeSE objects
-   [*patchwork*](https://patchwork.data-imaginist.com): framework to combine multiple ggplot objects

```{r}
#| label: setup
library(mia)
library(scater)
library(ggplot2)
library(ggrepel)
library(patchwork)

knitr::opts_chunk$set(message = FALSE, warning = FALSE, echo = TRUE)
```

## Example 1.1

To get started, we import [Tengeler2020](https://microbiome.github.io/outreach/tengeler2020_presentation.html) from *mia* and store it into a variable.

```{r}
#| label: import-tengeler
# load dataset and store it into tse
data("Tengeler2020", package = "mia")
tse <- Tengeler2020

# Get summary about the object
# What dimensions does the data have?
tse
```

## Example 1.2

After that, we transform the counts assay to relative abundances and store the new assay back into the TreeSE.

```{r}
#| label: transform-relabundance
# Transform counts to relative abundance
tse <- transformAssay(tse, method = "relabundance")
```

Here, we run multi-dimensional scaling (another word for PCoA) on the relative abundance assay to reduce the data to fewer dimensions.

```{r}
#| label: run-bray
# Reduce number of dimensions from 151 to 3 by PCoA
tse <- runMDS(tse,
              assay.type = "relabundance",
              FUN = vegan::vegdist,
              method = "bray",
              name = "Bray")

# The new dimensions are stored in the reducedDim slot
head(reducedDim(tse, "Bray"))
```

There are several ecological distances to choose from and you can find many of them under methods in the vignettes of vegan::vegdist. These metrics can be specified with the `method` argument.

## Example 1.3

We then visualise the first two dimensions.

```{r}
#| label: fig-bray
#| fig-cap: Ordination plots based on Bray-Curtis index. Samples are coloured by
#|   patient status.
# The new dimensions can be used to visualise diversity among samples
p1 <- plotReducedDim(tse, "Bray",
                     colour_by = "patient_status")

p1
```

## Exercise 1

-   [exercise 7.3](https://microbiome.github.io/OMA/docs/devel/pages/98_exercises.html#principal-coordinate-analysis-pcoa) -\> change to jaccard

## Example 2.1

```{r}
res <- apply(
    assay(tse, "relabundance"),
    MARGIN = 1, simplify = FALSE,
    function(x) cor(x, reducedDim(tse, "Bray"), method = "kendall")
)
```

```{r}
mat <- do.call(rbind, res)
colnames(mat) <- paste0("Bray", seq(ncol(mat)))
rownames(mat) <- rownames(tse)
```

```{r}
tail(sort(mat[ , 1]))
tail(sort(mat[ , 2]))
```

## Example 2.2

```{r}
df <- as.data.frame(mat)
df$Taxon <- rowData(tse)$Genus
df$Taxon[df$Bray1 < 0.6 & df$Bray2 < 0.5] <- ""

library(ggplot2)
library(ggrepel)

ggplot(df, aes(x = Bray1, y = Bray2)) +
  geom_point(size = 1) +
  lims(x = c(-1, 1), y = c(-1, 1)) +
  geom_text_repel(aes(label = Taxon), size = 3) +
  theme_classic()
```

## Exercise 2

an exercise where you have to find important taxa based on loadings we could also use toptaxa coloured ordination plot

## Example 3.1

example with different distance function. (could be custom)

```{r}
#| label: run-unifrac
tse <- runMDS(tse,
              assay.type = "counts",
              FUN = mia::calculateUnifrac,
              name = "Unifrac",
              tree = rowTree(tse),
              ntop = nrow(tse))

reducedDimNames(tse)
```

## Example 3.2

```{r}
#| label: fig-unifrac
#| fig-cap: Ordination plot based on (A) Bray-Curtis and (B) Unifrac indices. Samples are coloured by patient statu.
p2 <- plotReducedDim(tse, "Unifrac",
                     colour_by = "patient_status")

(p1 | p2) +
  plot_layout(guides = "collect") +
  plot_annotation(tag_levels = "A")
```

## Example 4.1

Example with different algorithm.

It is also possible to specify the number of output dimensions with the argument ncomponents. Here, we show it with the UMAP ordination method.

```{r}
#| label: run-umap
tse <- runUMAP(tse,
               assay.type = "counts",
               ncomponents = 3)

# The new dimensions are stored in the reducedDim slot
head(reducedDim(tse, "UMAP"))
```

## Example 4.2

We then plot all three dimensions, but you could also plot a pair of dimensions (1 and 3, 2 and 3 or 1 and 2) with the `ncomponents` argument.

```{r}
#| label: fig-umap
#| fig-cap: UMAP plot of the first three dimensions. Samples are coloured by
#|   patient status and shaped by cohort.
p3 <- plotReducedDim(tse, "UMAP",
                    ncomponents = 3,
                    colour_by = "patient_status",
                    shape_by = "cohort")

p3
```

## Try yourself

-   [exercise 7.2](https://microbiome.github.io/OMA/docs/devel/pages/98_exercises.html#visualization-basics-with-pca)
-   [exercise 7.3](https://microbiome.github.io/OMA/docs/devel/pages/98_exercises.html#principal-coordinate-analysis-pcoa).
-   exercise with aitchison
