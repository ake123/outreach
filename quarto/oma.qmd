---
title: "Orchestrating Microbiome Analysis with Bioconductor"
author: Tuomas Borman
format:
  revealjs: 
    slide-number: true
    chalkboard: 
      buttons: false
    preview-links: auto
    logo: images/mia_logo.png
    footer: <https://microbiome.github.io/>
---

## Outline

![](images/BioconductorSticker1.png){fig-alt="Bioconductor sticker" fig-align="center"}
![](images/mia_logo.png){fig-alt="mia logo" fig-align="center"}

## Bioconductor

- Community-driven open-source project

1. Training programs & workshops
2. Conferences & community support
3. Bioinformatics software

![](images/bioconductor_logo_rgb.jpg){fig-alt="Bioconductor logo." fig-align="right" width=10%}

## Software

- ~2,300 R packages
- Review, testing, documentation
- Genomics, transcriptomics, microbiomics, ...

```{r}
#| label: bioc_packages
#| eval: true

# Get packages and info based on their BiocViews
pkgs <- BiocPkgTools::biocPkgList()
#
pkgs[["SE"]] <- sapply(pkgs$Depends, function(x) any(grepl("summarizedexperiment", x, ignore.case = TRUE)) )
fields <- sapply(pkgs$biocViews, function(x){
    field <- "Other"
    if( any(grepl("genomic|genetic|gene|genom|DNA", x, ignore.case = TRUE)) ){
        field <- "Genomics"
    }
    if( any(grepl("proteomics|protein", x, ignore.case = TRUE)) ){
        field <- "Proteomics"
    }
    if( any(grepl("metabolomics|metabolome|metabolite|Lipidom|massspectro", x, ignore.case = TRUE)) ){
        field <- "Metabolomics"
    }
    if( any(grepl("transcripto|RNA-seq|RNA", x, ignore.case = TRUE)) ){
        field <- "Transcriptomics"
    }
    if( any(grepl("immuno", x, ignore.case = TRUE)) ){
        field <- "Immunology"
    }
    if( any(grepl("cytom", x, ignore.case = TRUE)) ){
        field <- "Cytometrics"
    }
    if( any(grepl("microarray|chip", x, ignore.case = TRUE)) ){
        field <- "Microarray"
    }
    if( any(grepl("single-cell|singlecell", x, ignore.case = TRUE)) ){
        field <- "Single-cell"
    }
    if( any(grepl("metagenom|microbiome|16S|microbiota|amplicon|shotgun|microb|metatranscript|metametabolo|metaproteo", x, ignore.case = TRUE)) ){
        field <- "Microbiome"
    }
    return(field)
})
pkgs[["Field"]] <- fields
# Get download stats 
df <- BiocPkgTools::biocDownloadStats()
# Subset to include only packages which BiocView we have
df <- df[df$Package %in% pkgs$Package, ]
# submitted <- BiocPkgTools::firstInBioc(df)
# df <- df[df$Package %in% pkgs$Package, ] # Take into account only current packages
pkgs <- pkgs[, c("Package", "SE", "Field")]
# Get table that shows which package is available in each date
dates <- df$Date |> unique()
dates <- dates[ dates < lubridate::floor_date(Sys.time(), "month") ]
available <- lapply(dates, function(date){
    temp <- df[df[["Date"]] == date, ]
    temp <- temp[match(unique(df$Package), temp$Package), ]
    temp <- temp[["Nb_of_distinct_IPs"]] > 0 | temp[["Nb_of_downloads"]] > 0
    temp[is.na(temp)] <- FALSE
    temp <- as.numeric(temp)
    return(temp)
})
available <- do.call(cbind, available) |> as.data.frame()
rownames(available) <- unique(df$Package)
colnames(available) <- dates
#
ind <- pkgs[match(unique(df$Package), pkgs$Package), "Field"][[1]]
pkgs_date <- rowsum(available, group = ind)
# Put into long format
library(tidyverse)
pkgs_date <- pkgs_date %>%
    rownames_to_column("Field") %>%
    pivot_longer(
        cols = colnames(pkgs_date)[ !colnames(pkgs_date) %in% c("Field")], 
        names_to = "Date",
        values_to = "N"
    )
pkgs_date[["Date"]] <- as.Date(pkgs_date[["Date"]])

# Create a plot that shows number of package through date
p1 <- ggplot(pkgs_date, aes(x = Date, y = N, fill = Field)) +
    geom_area() + theme_classic() + scale_fill_brewer(palette = "Paired") +
    labs(x = "Year", y = "Number of packages")
p1
```

## Data containers form the foundation {.smaller}

```{r}
#| label: data_container

# Load libraries
library(ggplot2)
library(ggforce)

# Adjusting the text positions for better alignment
ellipse_data <- data.frame(
    x = c(0, 0, 0),         # Centers of ellipses
    y = c(2, 1, 0),         # Centers of ellipses
    a = c(4, 3, 2),         # Widths of ellipses
    b = c(3, 2, 1),         # Heights of ellipses
    label = c("COMMUNITY", "PACKAGES", "DATA"),  # Labels for each ellipse
    label_y = c(4, 1.75, 0) # Adjusted vertical positions for labels
)

# Plot with adjusted labels
ggplot() +
    geom_ellipse(data = ellipse_data, 
                 aes(x0 = x, y0 = y, a = a, b = b, angle = 0),
                 color = "darkgreen", fill = "grey90", alpha = 0.7) +
    geom_text(data = ellipse_data, 
              aes(x = x, y = label_y, label = label), 
              size = 5, fontface = "bold") +
    coord_fixed() +
    theme_void()
```

##

```{r}
#| label: pages_and_book

library(magick)

img1 <- image_read("images/pile_of_papers.webp")
img2 <- image_read("images/book.webp")
arrow <- image_blank(width = 500, height = 1000, color = "none") %>%
  image_annotate("→", size = 200, gravity = "center", color = "black")

# Combine images with the arrow
final_image <- image_append(c(img1, arrow, img2), stack = FALSE)

# Display the final image
final_image
```

##

```{r}
#| label: data_and_data_container

library(magick)

img1 <- image_read("images/unorganized_data.webp")
img2 <- image_read("images/SE.png")
img2 <- image_scale(img2, "200%")  # This will make img2 twice as big
arrow <- image_blank(width = 500, height = 1000, color = "none") %>%
  image_annotate("→", size = 200, gravity = "center", color = "black")

# Combine images with the arrow
final_image <- image_append(c(img1, arrow, img2), stack = FALSE)

# Display the final image
final_image
```

## SummarizedExperiment

- Most common data container
- Optimized for biological data
- Extended to different purposes

```{r}
#| label: se_field
#| fig-align: "right"
#| eval: true

# Get packages and info based on their BiocViews
pkgs <- BiocPkgTools::biocPkgList()
#
pkgs[["SE"]] <- sapply(pkgs$Depends, function(x) any(grepl("summarizedexperiment", x, ignore.case = TRUE)) )
pkgs <- pkgs[pkgs[["SE"]], ]
fields <- sapply(pkgs$biocViews, function(x){
    field <- "Other"
    if( any(grepl("genomic|genetic|gene|genom|DNA", x, ignore.case = TRUE)) ){
        field <- "Genomics"
    }
    if( any(grepl("proteomics|protein", x, ignore.case = TRUE)) ){
        field <- "Proteomics"
    }
    if( any(grepl("metabolomics|metabolome|metabolite|Lipidom|massspectro", x, ignore.case = TRUE)) ){
        field <- "Metabolomics"
    }
    if( any(grepl("transcripto|RNA-seq|RNA", x, ignore.case = TRUE)) ){
        field <- "Transcriptomics"
    }
    if( any(grepl("immuno", x, ignore.case = TRUE)) ){
        field <- "Immunology"
    }
    if( any(grepl("cytom", x, ignore.case = TRUE)) ){
        field <- "Cytometrics"
    }
    if( any(grepl("microarray|chip", x, ignore.case = TRUE)) ){
        field <- "Microarray"
    }
    if( any(grepl("single-cell|singlecell", x, ignore.case = TRUE)) ){
        field <- "Single-cell"
    }
    if( any(grepl("metagenom|microbiome|16S|microbiota|amplicon|shotgun|microb|metatranscript|metametabolo|metaproteo", x, ignore.case = TRUE)) ){
        field <- "Microbiome"
    }
    return(field)
})
pkgs[["Field"]] <- fields
#
se_pkgs <- data.frame(table(pkgs$Field))
colnames(se_pkgs) <- c("Field", "N")
#
library(tidyverse)
library(ggrepel)
df2 <- se_pkgs %>% 
  mutate(csum = rev(cumsum(rev(N))), 
         pos = N/2 + lead(csum, 1),
         pos = if_else(is.na(pos), N/2, pos))
#
ggplot(se_pkgs, aes(x = "" , y = N, fill = fct_inorder(Field))) +
  geom_col(width = 1, color = 1) +
  coord_polar(theta = "y") +
  scale_fill_brewer(palette = "Paired") +
  geom_label_repel(data = df2, aes(y = pos, label = N), size = 4.5, nudge_x = 1, show.legend = FALSE) +
  guides(fill = guide_legend(title = "Field")) +
  theme_void()
```


##

![](images/SE.png){fig-alt="SummarizedExperiment class" fig-align="center" width=10%}

## Optimal container for microbiome data? {auto-animate=true}

## Optimal container for microbiome data? {auto-animate=true}

- **Multiple assays**: seamless interlinking

## Optimal container for microbiome data? {auto-animate=true}

- **Multiple assays**: seamless interlinking
- **Hierarchical data**: supporting samples & features

## Optimal container for microbiome data? {auto-animate=true}

- **Multiple assays**: seamless interlinking
- **Hierarchical data**: supporting samples & features
- **Side information**: extended capabilities & data types

## Optimal container for microbiome data? {auto-animate=true}

- **Multiple assays**: seamless interlinking
- **Hierarchical data**: supporting samples & features
- **Side information**: extended capabilities & data types
- **Optimized**: for speed & memory

## Optimal container for microbiome data? {auto-animate=true}

- **Multiple assays**: seamless interlinking
- **Hierarchical data**: supporting samples & features
- **Side information**: extended capabilities & data types
- **Optimized**: for speed & memory
- **Integrated**: with other applications & frameworks

## Optimal container for microbiome data? {auto-animate=true}

- **Multiple assays**: seamless interlinking
- **Hierarchical data**: supporting samples & features
- **Side information**: extended capabilities & data types
- **Optimized**: for speed & memory
- **Integrated**: with other applications & frameworks


_Reduce overlapping efforts, improve interoperability, ensure sustainability._

## TreeSummarizedExperiment

- Extension to SummarizedExperiment
- Optimal for microbiome data
- Allows us to develop modular and efficient workflows

##

![](images/SE.png){fig-alt="SummarizedExperiment class" fig-align="center" width=10%}

## {transition="fade" transition-speed="slow"}

![](images/paste-14DB8F76.png){fig-alt="TreeSummarizedExperiment class" fig-align="center" width=10%}

## MIcrobiome Analysis (mia) {transition="none"}

```{r}
#| label: mia_stats
#| eval: true

df <- BiocPkgTools::biocDownloadStats()
df <- as.data.frame(df)
df <- df[df[["Date"]] >= lubridate::floor_date(Sys.time(), "year"), ]
df <- rowsum(df[, "Nb_of_downloads"], df$Package)
pkgs <- BiocPkgTools::biocPkgList()
df <- df[match(pkgs[["Package"]], rownames(df)), , drop = FALSE]
df <- df[order(df[, 1], decreasing = TRUE), ,  drop = FALSE]
perc <- paste0(round(which(rownames(df) == "mia") / nrow(df), 3)*100, "%")

```

- Microbiome data science in SummarizedExperiment ecosystem
- Distributed through several R packages
- mia package top `r if(exists("perc")) perc else "*ERROR*"` Bioconductor downloads

![](images/mia_logo.png){fig-alt="mia logo." fig-align="right" width=10%}

## mia ecosystem

- [mia](https://bioconductor.org/packages/release/bioc/html/mia.html) (Data analysis)
- [miaViz](https://bioconductor.org/packages/release/bioc/html/miaViz.html) (Visualization)
- [miaSim](https://bioconductor.org/packages/release/bioc/html/miaSim.html) (Simulation)
- [miaTime](https://github.com/microbiome/miaTime) (Time series analysis)
- [miaDash](https://miadash-microbiome.2.rahtiapp.fi/) (Graphical user interface)
- [iSEEtree](https://bioconductor.org/packages/release/bioc/html/iSEEtree.html) (Interactive visualization)
- [Expanded by independent developers](https://microbiome.github.io/OMA/docs/devel/pages/miaverse.html#sec-packages)

## Advantages

- Shared data container
- Scalable & optimized for large datasets
- Comprehensive documentation

## {auto-animate="true"}

```r
# Load package
library(mia)
# Load example dataset
data("peerj13075")
tse <- peerj13075
```

```{r}
#| label: show_treese


# Load package
library(mia)
# Load example dataset
data("peerj13075")
tse <- peerj13075

tse
```


## {auto-animate="true"}

```r
# Agglomerate to genus level
tse <- agglomerateByRank(tse, rank = "genus")
```

## {auto-animate="true"}

```r
# Agglomerate to genus level
tse <- agglomerateByRank(tse, rank = "genus")

# Add relative abundances
tse <- transformAssay(tse, method = "relabundance")
```

```{r}
#| label: show_transform

# Agglomerate to genus level
tse <- agglomerateByRank(tse, rank = "genus")

# Add relative abundances
tse <- transformAssay(tse, method = "relabundance")
```

## {auto-animate="true"}

```r
# Load visualization package
library(miaViz)
# Summarize abundance of top taxa
plotAbundanceDensity(tse, assay.type = "relabundance")
```

```{r}
#| label: show_prevalence

# Load visualization package
library(miaViz)
# Summarize abundance of top taxa
plotAbundanceDensity(tse, assay.type = "relabundance")
```

## {auto-animate="true"}

```r
# Calculate alpha diversity indices
tse <- addAlpha(tse, index = "shannon")
```

## {auto-animate="true"}

```r
# Calculate alpha diversity indices
tse <- addAlpha(tse, index = "shannon")

# Load single-cell analysis package that has useful, complementary tools
library(scater)
# Plot alpha diversity
plotColData(tse, x = "Geographical_location", y = "shannon")
```

```{r}
#| label: show_alpha
#| fig-height: 4

# Calculate alpha diversity indices
tse <- addAlpha(tse, index = "shannon")

# Load single-cell analysis package that has useful, complementary tools
library(scater)
# Plot alpha diversity
plotColData(tse, x = "Geographical_location", y = "shannon")
```

## {auto-animate="true"}

```r
# Perform PCoA
tse <- runMDS(tse, assay.type = "relabundance", FUN = getDissimilarity, method = "bray")
```

## {auto-animate="true"}

```r
# Perform PCoA
tse <- runMDS(tse, assay.type = "relabundance", FUN = getDissimilarity, method = "bray")
# Plot PCoA
plotReducedDim(tse, dimred = "MDS", colour_by = "Geographical_location")
```

```{r}
#| label: sow_pcoa

# Perform PCoA
tse <- runMDS(tse, assay.type = "relabundance", FUN = getDissimilarity, method = "bray")
# Plot PCoA
plotReducedDim(tse, dimred = "MDS", colour_by = "Geographical_location")
```

## Orchestrating Microbiome Analysis with Bioconductor

- Resources and tutorials for microbiome analysis
- Community-built best practices
- Open to contributions!

::: {.callout-tip}
## Go to the book

[microbiome.github.io/OMA](https://microbiome.github.io/OMA/docs/devel/){preview-link="true"}
:::

## Thank you for your time! {.smaller}


![](images/paste-DD45BC4A.png){width="600" fig-align="right"}
\hfill <small>[_Moreno-Indias et al. (2021)_]{style="right"}</small>

![](https://apps.utu.fi/media/logo/UTU_logo_EN_RGB.png){fig-alt="University of Turku logo" width="100" fig-align="center"}
![](https://www.ebi.ac.uk/metagenomics/static/50d6b60518ea8b4816b9.png){fig-alt="UTU logo" width="190" fig-align="center"}
![](https://media.aka.fi/api/v3/public/file/497671429c8b0783/thumbnail.jpg?version=e5566c3f8491a9bcc65c74594efa47c0){fig-alt="Research Council of Finland logo" width="100" fig-align="center"}
