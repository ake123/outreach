---
title: "Compositional Heatmaps"
format: revealjs
editor: visual
smaller: true
bibliography: references.bib
---

```{r}
#| label: setup
#| include: false
knitr::opts_chunk$set(message = FALSE, warning = FALSE, echo = TRUE)
```

## Example 1.1

We first import the packages used in this tutorial.

```{r}
#| label: packages
# Import libraries
library(mia)
library(ComplexHeatmap)
```

We also import Tengeler2020 from the mia package and store it into a variable.

```{r}
#| label: import-tengeler
# Load dataset and store it into tse
data("Tengeler2020", package = "mia")
tse <- Tengeler2020
```

Next, we transform the counts assay to relative abundance assay and store it into the TreeSE.

```{r}
#| label: transform-relabundance
# Transform counts to relative abundances
tse <- transformAssay(tse, method = "relabundance")
```

Then, we agglomerate the experiment to the order level, so that information is more condensed and therefore easier to visualise and interpret.

```{r}
#| label: agglomerate-order
# Agglomerate by order
tse_order <- mergeFeaturesByRank(tse, rank = "Order")
```

## Why relative abundances?

Relative abundances are useful because they are not affected by **compositionality**, which is present in the counts assay due to **sequencing bias** (the unequal amplification of DNA from two different samples due to random effects).

```{r}
#| label: tab-top
tse_phylum <- mergeFeaturesByRank(tse, rank = "Phylum")

tse_list <- splitOn(tse_phylum, f = "patient_status")

top_tab_list <- lapply(
    tse_list,
    function(x) round(rowMeans(assay(x, "relabundance")[getTopTaxa(x, top = 4L), ]) * 100, 1)
)

knitr::kable(cbind(top_tab_list[[1]], top_tab_list[[2]]), col.names = c("ADHD", "Control"))
```

## Example 1.2

To reduce data skewness, we further transform the relative abundance assay with
the **Centered-Log Ratio** (CLR), which is defined as follows:

$$
clr = log \frac{x}{g(x)} = log(x)âˆ’log[g(x)]
$$

where x is a feature and g(x) is the geometric mean of all features in a sample.

```{r}
#| label: transform-clrz
# Transform relative abundances to clr
tse_order <- transformAssay(tse_order,
                            assay.type = "relabundance",
                            method = "clr",
                            pseudocount = 1,
                            MARGIN = "samples")
```

Lastly, we get the row-wise **z-scores** of every feature from the clr assay to
standardise abundances across samples.

```{r}
# Transform clr to z
tse_order <- transformAssay(tse_order,
                            assay.type = "clr", 
                            method = "z",
                            name = "clr_z",
                            MARGIN = "features")
```

## Example 1.3

Finally, we plot the compositional heatmap with `ComplexHeatmap`. Results are illustrated by @fig-compheat.

```{r}
#| label: fig-compheat
#| fig-cap: Heatmap of CLR-Z assay where columns correspond to samples and rows
#|   to taxa agglomerated by order.
clrz_hm <- Heatmap(assay(tse_order, "clr_z"), name = "clr-z")
clrz_hm
```

## Why clr-z transformation?

A CLR-z transformation improves comparability in two steps:

1.  Apply **CLR transform** to center features **column-wise**
2.  Find **Z score** to standardise features **row-wise**

```{r}
#| label: heatmap-comparison
#| echo: false
assay2heatmap <- function(tse, assay.type) {
  
    hm_args <- list(matrix = assay(tse, assay.type), name = assay.type,
        show_row_names = FALSE, show_column_names = FALSE,
        show_row_dend = FALSE, show_column_dend = FALSE,
        border = TRUE, rect_gp = gpar(col = "white", lwd = 1),
        heatmap_legend_param = list(direction = "horizontal",
                                    title_position = "topcenter"))
  
    hm <- do.call(Heatmap, hm_args)
    return(hm)
}

counts_hm <- assay2heatmap(tse_order, "counts")
relab_hm <- assay2heatmap(tse_order, "relabundance")
clr_hm <- assay2heatmap(tse_order, "clr")
clrz_hm <- assay2heatmap(tse_order, "clr_z")
```

```{r}
#| label: fig-comparison
#| fig-cap: Visual comparison between counts, relative abundance, clr and clr-z
#|   assays (from left to right).
#| echo: false
draw(counts_hm + relab_hm + clr_hm + clrz_hm,
     row_title = "Features", column_title = "Samples",
     column_title_side = "bottom", heatmap_legend_side = "top")
```

## Exercise 1

-   [exercise 9.2](https://microbiome.github.io/OMA/docs/devel/pages/98_exercises.html#heatmap-visualization)
-   refine exercise 9.2 and make a new one with some heatmap functionality

## Resources

-   [ComplexHeatmap Complete Reference](https://jokergoo.github.io/ComplexHeatmap-reference/book/)
